name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build binaries for all platforms
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        COMMIT="${GITHUB_SHA}"
        DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        LDFLAGS="-X github.com/orkes-io/conductor-cli/cmd.Version=${VERSION} -X github.com/orkes-io/conductor-cli/cmd.Commit=${COMMIT} -X github.com/orkes-io/conductor-cli/cmd.Date=${DATE}"

        # Create dist directory
        mkdir -p dist

        # Build for Linux amd64
        GOOS=linux GOARCH=amd64 go build -ldflags "$LDFLAGS" -o dist/orkes_linux_amd64

        # Build for Linux arm64
        GOOS=linux GOARCH=arm64 go build -ldflags "$LDFLAGS" -o dist/orkes_linux_arm64

        # Build for macOS amd64
        GOOS=darwin GOARCH=amd64 go build -ldflags "$LDFLAGS" -o dist/orkes_darwin_amd64

        # Build for macOS arm64
        GOOS=darwin GOARCH=arm64 go build -ldflags "$LDFLAGS" -o dist/orkes_darwin_arm64

        # Build for Windows amd64
        GOOS=windows GOARCH=amd64 go build -ldflags "$LDFLAGS" -o dist/orkes_windows_amd64.exe

        # Build for Windows arm64
        GOOS=windows GOARCH=arm64 go build -ldflags "$LDFLAGS" -o dist/orkes_windows_arm64.exe

        # Make binaries executable
        chmod +x dist/orkes_*

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")

        if [ -z "$PREV_TAG" ]; then
          # First release - use all commits
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          # Get commits since previous tag
          CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi

        # Write changelog to file
        echo "$CHANGELOG" > CHANGELOG.txt
        cat CHANGELOG.txt

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: CHANGELOG.txt
        files: |
          dist/orkes_linux_amd64
          dist/orkes_linux_arm64
          dist/orkes_darwin_amd64
          dist/orkes_darwin_arm64
          dist/orkes_windows_amd64.exe
          dist/orkes_windows_arm64.exe
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Update package.json version
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        # Remove 'v' prefix from version tag
        NPM_VERSION="${VERSION#v}"
        # Update package.json with the new version
        npm version $NPM_VERSION --no-git-tag-version --allow-same-version

    - name: Publish to npm
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Update Homebrew formula
      if: "!contains(steps.get_version.outputs.VERSION, '-')"
      env:
        HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        BREW_VERSION="${VERSION#v}"

        # Calculate SHA256 for each binary
        SHA256_DARWIN_AMD64=$(shasum -a 256 dist/orkes_darwin_amd64 | awk '{print $1}')
        SHA256_DARWIN_ARM64=$(shasum -a 256 dist/orkes_darwin_arm64 | awk '{print $1}')
        SHA256_LINUX_AMD64=$(shasum -a 256 dist/orkes_linux_amd64 | awk '{print $1}')
        SHA256_LINUX_ARM64=$(shasum -a 256 dist/orkes_linux_arm64 | awk '{print $1}')

        # Clone homebrew tap
        git clone https://github.com/conductor-oss/homebrew-conductor-tools.git /tmp/homebrew-tap
        cd /tmp/homebrew-tap

        # Create Formula directory if it doesn't exist
        mkdir -p Formula

        # Update formula
        cat > Formula/orkes.rb << EOF
        class Orkes < Formula
          desc "CLI for Conductor - The leading open-source orchestration platform"
          homepage "https://github.com/conductor-oss/conductor-cli"
          version "$BREW_VERSION"

          on_macos do
            if Hardware::CPU.arm?
              url "https://github.com/conductor-oss/conductor-cli/releases/download/${VERSION}/orkes_darwin_arm64"
              sha256 "$SHA256_DARWIN_ARM64"
            else
              url "https://github.com/conductor-oss/conductor-cli/releases/download/${VERSION}/orkes_darwin_amd64"
              sha256 "$SHA256_DARWIN_AMD64"
            end
          end

          on_linux do
            if Hardware::CPU.arm?
              url "https://github.com/conductor-oss/conductor-cli/releases/download/${VERSION}/orkes_linux_arm64"
              sha256 "$SHA256_LINUX_ARM64"
            else
              url "https://github.com/conductor-oss/conductor-cli/releases/download/${VERSION}/orkes_linux_amd64"
              sha256 "$SHA256_LINUX_AMD64"
            end
          end

          def install
            bin.install "orkes_darwin_arm64" => "orkes" if Hardware::CPU.arm? && OS.mac?
            bin.install "orkes_darwin_amd64" => "orkes" if Hardware::CPU.intel? && OS.mac?
            bin.install "orkes_linux_arm64" => "orkes" if Hardware::CPU.arm? && OS.linux?
            bin.install "orkes_linux_amd64" => "orkes" if Hardware::CPU.intel? && OS.linux?
          end

          test do
            system "#{bin}/orkes", "--version"
          end
        end
        EOF

        # Commit and push
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add Formula/orkes.rb
        git commit -m "Update orkes to $BREW_VERSION"
        git push
